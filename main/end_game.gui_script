local flow = require "ludobits.m.flow"
local leaderboard = require "example.playfab.leaderboard"
local navigate = require "example.navigate"

function init(self)
	msg.post(".", "acquire_input_focus")
	math.randomseed(os.time())
	self.score = 0

	self.end_dialog = gui.get_node("end_dialog")
	gui.set_enabled(self.end_dialog, false)
	
	self.score_node = gui.get_node("score")
	self.trivia_node = gui.get_node("trivia")
	self.music_off_node = gui.get_node("music_off_end")
	self.music_on_node = gui.get_node("music_on_end")

end

function set_trivia(self)
	local trivia_text = {
		"W trybie offline tablica najlepszych wyników nie jest dostępna,\n Twoje wyniki również nie są zapisywane.\n Aby przyjść w tryb online,\n włącz transfer danych/wifi\n w telefonie i zrestartuj gre",
	-- 	"#1 Miasto Zamość\nZostało założone w 1580 roku z inicjatywy\nHetmana Koronnego Jana Zamoyskiego.\nJego zaprojektowania podjął sie włoski\narchitekt Bernando Morando.",
	-- 	"#2 Baterie i akumulatory \nsą zaliczane do substancji niebezpiecznych. \nNależy oddawać je do wyznaczonych punktów \nzbiórki, specjalnych pojemnikach na baterie, \nlub przy okazji zbiórek elektroodpadów.",
	-- 	"#3 Przeterminowane leki \nMają negatywny wpływ na środowisku oraz \nżycie i zdrowie ludzi. Należy je wyrzucać w \ntrakcie specjalnych zbiórek, do spcjalnych \nkoszy w aptekach, lub 'Punktów Selektywnej' \nZbiórki Odpadów Komunalnej.",
	-- 	"#4 Przecięty polak\nProdukuje 315kg rocznie, jest to drugi wynik\nw UE po Rumunii (272kg). Najwięcej śmieci\nprodukują Duńczycy (781kg) i Niemcy (633kg).\nŚrednia unina wynosi 487kg.",
	-- 	"#5 33.8%\nTyle odpadów w Polsce zostało poddane\nrecyklingowi w roku 2017. Średnia unijna\nwyniosła w tym czasie 46.4%. Najlepiej z\nrecyklingiem wśród państw UE radzą sobie\nNiemcy (67.6%), najgorzej z kolei wypada\nMalta z wynikiem zaledwie 6.4%."
	-- }
	}
	local rand = math.random(1,5)
	gui.set_text(self.trivia_node, trivia_text[rand])
end

local function game_over(self)
	self.game_over = true
	-- flow.start(function()
	-- 	-- msg.post("game:/game#hud", "game_over")
	-- 	leaderboard.update(self.score)
	-- 	leaderboard.set_last_score(self.score)
	-- 	navigate.leaderboard()
	-- end)
end

function on_message(self, message_id, message, sender)
	local s = 1.2
	if message_id == hash("player_lost") then
		msg.post("mainG#gui", "hide_menu")
		sound.stop("paper-trashcan#sound")

		pause_flag = 1
		end_game_flag = true
		set_trivia(self)
		game_finished = true
		self.score = message.final_score
		gui.set_enabled(self.end_dialog, true)
		gui.set_text(self.score_node, tostring(self.score))
		gui.animate(self.score_node, gui.PROP_SCALE, vmath.vector4(s, s, s, 0), gui.EASING_OUT, 0.1, 0.0, scale_down)
		
		if sound_effect_flag == true then
			sound.play("gui_sound#sound_game_over", {delay = 0, gain = 1, pan = -1.0, speed = 1})
			gui.set_enabled(self.music_off_node, false)
		else
			gui.set_enabled(self.music_off_node, true)
		end

		game_over(self)
	end
end

function on_input(self, action_id, action)
	local go_to_menu = gui.get_node("go_to_menu")
	local play_again = gui.get_node("play_again")
	local music_node = gui.get_node("music_on_end")
	local music_off_node = gui.get_node("music_off_end")
	
	if game_finished == true and gui.is_enabled(self.end_dialog) == true then
		if(action_id == hash("touch") and action.released == true) then
			if gui.pick_node(go_to_menu, action.x, action.y) then
				if (sound_effect_flag == true) then
					sound.play("gui_sound#sound_ui_click", {delay = 0, gain = 1, pan = -1.0, speed = 1})
				end
				navigate.startmenu()
				-- msg.post("loader:/go#loader", "open_menu")
			end
		
			if gui.pick_node( play_again, action.x, action.y) then
				if (sound_effect_flag == true) then
					sound.play("gui_sound#sound_ui_click", {delay = 0, gain = 1, pan = -1.0, speed = 1})
				end
				msg.post("loader:/go#loader", "play_again")
			end

			if gui.pick_node(music_node, action.x, action.y) then
				if sound_effect_flag == true then
					print("on->off")
					if (sound_effect_flag == true) then
						sound.play("gui_sound#sound_ui_switch", {delay = 0, gain = 1, pan = -1.0, speed = 1})
					end
					sound_effect_flag = false
					gui.set_enabled(music_off_node, true)
				else
					print("off->on")
					sound_effect_flag = true
					if (sound_effect_flag == true) then
						sound.play("gui_sound#sound_ui_switch", {delay = 0, gain = 1, pan = -1.0, speed = 1})
					end
					gui.set_enabled(music_off_node, false)
				end
			end
		
		end
	end
end