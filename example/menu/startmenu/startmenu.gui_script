local authentication = require "example.playfab.authentication"
local playfab = require "PlayFab.PlayFabClientApi"
local dirtylarry = require "dirtylarry/dirtylarry"
local navigate = require "example.navigate"
local flow = require "ludobits.m.flow"
local translate = require "localization.translate"
local translations = require "localization.translations"

local LANGUAGES = { "en", "pl" }
language_index = 0

local function is_authenticated()
	return true
end

local function update_account_info(self)
	if not offline_mode then 
		if not is_authenticated() then
			gui.set_text(gui.get_node("account_info"), translate("OFFLINE_MODE"))
		else
			local user_id = authentication.user_id()
			local username = authentication.username() or "UNKNOWN"
			print("ZALOGOWANY", username, user_id)
			gui.set_text(gui.get_node("account_info"), (translate("LOGIN_AS") .. "\n %s (%s)"):format(username, user_id:sub(10)))
		end
	else
		gui.set_text(gui.get_node("account_info"), "Jesteś w trybie OFFLINE,\n Twoje wyniki nie będą zapisywane!")
	end
end

local function update_translation(self)
	gui.set_text(gui.get_node("play/larrylabel"), translate("BTN_PLAY"))
	gui.set_text(gui.get_node("register/larrylabel"), translate("BTN_REGISTER"))
	gui.set_text(gui.get_node("help/larrylabel"), translate("BTN_HELP"))
	gui.set_text(gui.get_node("leaderboard/larrylabel"), translate("BTN_BEST_SCORE"))
	gui.set_text(gui.get_node("logout/larrylabel"), translate("BTN_LOGOUT"))
	gui.set_text(gui.get_node("credits/larrylabel"), translate("BTN_CREDITS"))
	gui.set_text(gui.get_node("login/larrylabel"), translate("BTN_LOGIN"))
	gui.set_text(gui.get_node("exit/larrylabel"), translate("BTN_EXIT"))
end

local function update_button_visibility(self)	
	local buttons = {}
	local function update_button(node, visible)
		gui.set_enabled(node, visible)
		print(node, visible)
		if visible then table.insert(buttons, node) end
	end

	update_button(self.play, is_authenticated())
	update_button(self.leaderboard, is_authenticated() and not offline_mode)
	update_button(self.help, is_authenticated())
	update_button(self.credits, is_authenticated())
	update_button(self.login, is_authenticated() and not authentication.has_username_and_password() and not offline_mode)
	update_button(self.register, is_authenticated() and not authentication.has_username_and_password() and not offline_mode)
	update_button(self.logout, is_authenticated() and authentication.has_username_and_password() and not offline_mode)
	update_button(self.exit, is_authenticated())

	update_translation(self)
	local height = 100
	local spacing = 16
	local y = 540 + (height + spacing) / 2 + #buttons * (height + spacing) / 2
	for i=1,#buttons do
		local pos = gui.get_position(buttons[i])
		pos.y = y - i * (height + spacing)
		print(pos)
		gui.set_position(buttons[i], pos)
	end
end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.play = gui.get_node("play/larrybutton")
	self.help = gui.get_node("help/larrybutton")
	self.leaderboard = gui.get_node("leaderboard/larrybutton")
	self.credits = gui.get_node("credits/larrybutton")
	self.register = gui.get_node("register/larrybutton")
	self.logout = gui.get_node("logout/larrybutton")
	self.login = gui.get_node("login/larrybutton")
	self.exit = gui.get_node("exit/larrybutton")
	translate.set_default_language()
	update_button_visibility(self)
	update_account_info(self)
	translate.add_translations(translations)
	if not offline_mode then 
		authentication.listeners.add(msg.url())
	end
	local music_off_node = gui.get_node("music_off_menu")

	if sound_effect_flag == true then
		gui.set_enabled(music_off_node, false)
		sound.play("gui_sound#main_music", {delay = 0, gain = 1, pan = -1.0, speed = 1})
	else
		gui.set_enabled(music_off_node, true)
	end
	print("Auth init: ", authentication.user_id(), authentication.username())
end

function final(self)
	msg.post(".", "release_input_focus")
	authentication.listeners.remove()
end

function on_input(self, action_id, action)
	if(action_id == hash("touch") and action.pressed == true) then
		if (sound_effect_flag == true) then
			sound.play("gui_sound#sound_ui_click", {delay = 0, gain = 1, pan = -1.0, speed = 1})
		end
	end
	dirtylarry:button("play", action_id, action, function()
		--navigate.game()
		navigate.choose_mode()
	end)
	dirtylarry:button("help", action_id, action, function()
		if (sound_effect_flag == true) then
			sound.play("gui_sound#sound_ui_click", {delay = 0, gain = 1, pan = -1.0, speed = 1})
		end
		navigate.help()
	end)
	dirtylarry:button("credits", action_id, action, function()
		if (sound_effect_flag == true) then
			sound.play("gui_sound#sound_ui_click", {delay = 0, gain = 1, pan = -1.0, speed = 1})
		end
		navigate.credits()
	end)
	dirtylarry:button("register", action_id, action, function()
		if (sound_effect_flag == true) then
			sound.play("gui_sound#sound_ui_click", {delay = 0, gain = 1, pan = -1.0, speed = 1})
		end
		if is_authenticated() and not authentication.has_username_and_password() then
			navigate.register()
		end
	end)
	dirtylarry:button("leaderboard", action_id, action, function()
		if (sound_effect_flag == true) then
			sound.play("gui_sound#sound_ui_click", {delay = 0, gain = 1, pan = -1.0, speed = 1})
		end
		navigate.leaderboard()
	end)
	dirtylarry:button("logout", action_id, action, function()
		if (sound_effect_flag == true) then
			sound.play("gui_sound#sound_ui_click", {delay = 0, gain = 1, pan = -1.0, speed = 1})
		end
		flow(authentication.logout)
	end)
	dirtylarry:button("login", action_id, action, function()
		if (sound_effect_flag == true) then
			sound.play("gui_sound#sound_ui_click", {delay = 0, gain = 1, pan = -1.0, speed = 1})
		end
		navigate.login()
	end)
	dirtylarry:button("exit", action_id, action, function()
		if (sound_effect_flag == true) then
			sound.play("gui_sound#sound_ui_click", {delay = 0, gain = 1, pan = -1.0, speed = 1})
		end
		msg.post("@system:", "exit", {code = 0})
	end)
	if(action_id == hash("touch") and action.released == true) then
		local music_node = gui.get_node("music_on_menu")
		local music_off_node = gui.get_node("music_off_menu")
		if(gui.pick_node(music_node, action.x, action.y))then
			if sound_effect_flag == true then
				if (sound_effect_flag == true) then
					sound.play("gui_sound#sound_ui_switch", {delay = 0, gain = 1, pan = -1.0, speed = 1})
				end
				print("on->off")
				sound_effect_flag = false
				sound.stop("gui_sound#main_music")
				gui.set_enabled(music_off_node, true)
			else
				print("off->on")
				sound_effect_flag = true
				if (sound_effect_flag == true) then
					sound.play("gui_sound#sound_ui_switch", {delay = 0, gain = 1, pan = -1.0, speed = 1})
				end
				gui.set_enabled(music_off_node, false)
			end
		end
	end
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	if message_id == authentication.LOGIN_SUCCESS then
		update_button_visibility(self)
		update_account_info(self)
		navigate.hide_spinner()
		print("Auth: ", authentication.user_id(), authentication.username())
	elseif message_id == authentication.LOGIN_FAILED then
		update_button_visibility(self)
		update_account_info(self)
		navigate.hide_spinner()
		navigate.show_popup("Unable to login")
	end
end

function on_reload(self)
    -- Add input-handling code here
    -- Remove this function if not needed
end
