local leaderboard = require "example.playfab.leaderboard"
local button = require "in.button"
local flow = require "ludobits.m.flow"
local navigate = require "example.navigate"
local dirtylarry = require "dirtylarry/dirtylarry"
local authentication = require "example.playfab.authentication"
local translate = require "localization.translate"
local translations = require "localization.translations"

-- self.current_score = 0
local function refresh_leaderboard(self)
	local s = translate("HIGHSCORE_LEADERBOARD")
	local entries = leaderboard.get()
	local playerBestResult = 0
-- DEBUG
-- 	for index, data in ipairs(entries) do
-- 		print(index, data)
-- 
-- 		for key, value in pairs(data) do
-- 			print('\t', key, value)
-- 			if key == "Profile" then
-- 				for key, value in pairs(value) do
-- 					print('\t', key, value)
-- 				end
-- 			end
-- 		end
-- 	end
	if #entries == 0 then
		s = s .. translate("HIGHSCORE_LOADING")
	else
		for _,entry in ipairs(entries or {}) do
			print("user id: ",  authentication.user_id())
			if entry.PlayFabId == authentication.user_id() then
				s = s .. (">> #%d %s %d\n"):format(1 + entry.Position, entry.DisplayName or ("Unknown (" .. entry.PlayFabId:sub(10) .. ")"), entry.StatValue)
				playerBestResult = entry.StatValue
			else
				s = s .. ("#%d %s %d\n"):format(1 + entry.Position, entry.DisplayName or ("Unknown (" .. entry.PlayFabId:sub(10) .. ")"), entry.StatValue)
			end
		end
	end
	gui.set_text(gui.get_node("leaderboard"), s)
	-- if last_score >= 0 then 
	-- 	if last_score > playerBestResult then
	-- 		gui.set_text(gui.get_node("best_result"), "TO TWÓJ NOWY REKORD!")
	-- 	end
	-- end
end

local function update_translation(self)
	gui.set_text(gui.get_node("play_again/larrylabel"), translate("HIGHSCORE_PLAY_AGAIN"))
	gui.set_text(gui.get_node("add_nick/larrylabel"), translate("HIGHSCORE_ADD_NICK"))
end

function init(self)
	button.acquire()
	if easy_mode_enabled then
		gui.set_text(gui.get_node("mode_info_txt"), translate("HIGHSCORE_EASY_MODE"))
	else 
		gui.set_text(gui.get_node("mode_info_txt"), translate("HIGHSCORE_HARD_MODE"))
	end
	last_score = leaderboard.get_last_score()
	if authentication.has_username_and_password() or last_score == 0 then
		set_nick_btn = gui.get_node("add_nick/larrybutton")
		gui.set_enabled(set_nick_btn, false)
	end
	-- leaderboard.refresh() 
	-- print("leaderboard gui msg.url", msg.url())
	load_leaderboard()
	-- leaderboard.listeners.add(msg.url())
	-- refresh_leaderboard(self)

	print("Last score", last_score)
	if last_score ~= 0 then
		gui.set_text(gui.get_node("player_result"), translate("HIGHSCORE_YOUR_SCORE") .. last_score)
	end

	update_translation(self)
end

function final(self)
	button.release()
	leaderboard.listeners.remove()
end

function on_input(self, action_id, action)
	-- button.on_input(action_id, action)
	if(action_id == hash("touch") and action.pressed == true) then
		sound.play("gui_sound#sound_ui_click", {delay = 0, gain = 1, pan = -1.0, speed = 1})
	end
	dirtylarry:button("menu", action_id, action, function()
		show_spinner()
		navigate.startmenu()
		leaderboard.set_last_score(0)
	end)
	dirtylarry:button("add_nick", action_id, action, function()
		show_spinner()
		navigate.register()
	end)
	dirtylarry:button("play_again", action_id, action, function()
		show_spinner()
		leaderboard.set_last_score(0)
		navigate.play_again()
	end)
end

function load_leaderboard()
	-- navigate.show_spinner()
	flow(function()
		local response, error = leaderboard.refresh_2(
		function(response)
			print("REFRESH leaderboard F1")
			leaderboard.leaderboard = response.Leaderboard
			navigate.hide_spinner()
			refresh_leaderboard()
		end,
		function(error)
			print("REFRESH leaderboard F2")
			navigate.show_popup(error.errorMessage or "Something went wrong")
			navigate.hide_spinner()
		end)
	end)
end

function on_message(self, message_id, message, sender)
	flow.on_message(message_id, message, sender)
	-- if message_id == leaderboard.REFRESH_SUCCESS then
	-- 	refresh_leaderboard(self)
	-- elseif message_id == leaderboard.REFRESH_FAILED then
	-- 	gui.set_text(gui.get_node("player_result"), "Nastąpił problem podczas wczytywania wyników :(")
	-- end
end
