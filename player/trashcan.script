local acc = require "in.accelerometer"

local min_x = -200
local max_x = 200
actual_can = 1
level = 1
local can_table = {"#glass-trashcan", "#paper-trashcan", "#plastic-metal-trashcan", "#organic-trashcan", "#mixed-trashcan"}
-- 1 -glass
-- 2 -paper
-- 3 -plastic/metal
-- 4 -organic
-- 5 -mixed 

--What this code do? https://www.youtube.com/watch?v=VFh2mfqmiRU 36:30
function init(self)
	msg.post(".", "acquire_input_focus")
	self.runSpeed = 150
	self.accRunSpeed = 1050
	self.curAnim = "idle"
	--msg.post("#paper-trashcan", "play_animation", {id = hash("trashcan_organic")})
	self.speed = vmath.vector3()
	for i = 1,5,1
	do
		msg.post(can_table[i], "disable")
	end
	msg.post(can_table[actual_can], "enable")

	acc.calibrate()

	if (sound_effect_flag == true) then
		sound.play("paper-trashcan#sound", {delay = 1, gain = 0.3, pan = -1.0, speed = 1})
	end
end

function final(self)
	acc.reset()

	sound.stop("paper-trashcan#sound")
	music_bg_playing_flag = false
end

function update(self, dt)
	local pos = go.get_position()
	
	local adjusted = acc.adjusted()
	
	if (pos.x <= min_x and self.speed.x <= 0) then
		-- do nothing, left edge
	elseif (pos.x >= max_x and self.speed.x >= 0) then
		-- do nothing, right edge
	elseif pause_flag == 1 then
		-- do nothing, pause
	else 
		pos = pos + self.speed * dt
		go.set_position(pos)
		if self.curAnim ~= "run" then
			--msg.post("#sprite", "play_animation",{ id=hash("run")})
			self.curAnim = "run"
		end
	end
end

function on_input(self, action_id, action)
	acc.on_input(action)

	-- ACC
	if action.acc_x then
		if action.released then
			self.speed.x = 0
		else
			self.speed.x = action.acc_x * self.accRunSpeed
		end
	end
	
	if pause_flag == 0 then
		-- ARROW RIGHT - MOVE RIGHT
		if action_id == hash("MOVE_RIGHT") and action.pressed then
			self.speed.x = self.runSpeed
			--sprite.set_hflip("#sprite", false)
		elseif action_id == hash("MOVE_RIGHT") and action.released then
			self.speed.x = 0
		end

		-- ARROW LEFT - MOVE LEFT
		if action_id == hash("MOVE_LEFT") and action.pressed then
			self.speed.x = -self.runSpeed
			--sprite.set_hflip("#sprite", true)
		elseif action_id == hash("MOVE_LEFT") and action.released then
			self.speed.x = 0
		end
		
		-- ARROW UP - CHANGE CAN, INCREMENT INDEX
		if (action_id == hash("CAN_UP") and action.pressed) then
			msg.post(can_table[actual_can], "disable")
			actual_can = actual_can + 1
			if actual_can > level or actual_can > 5 then
				actual_can = 1
			end
			msg.post(can_table[actual_can], "enable")
			msg.post("mainG#gui", "change_can")
		end
		
		-- ARROW DOWN - CHANGE CAN, DECREMENT INDEX
		if (action_id == hash("CAN_DOWN") and action.pressed) then
			msg.post(can_table[actual_can], "disable")
			actual_can = actual_can - 1
			if actual_can < 1 then
				if level > 5 then
					actual_can = 5
				else
					actual_can = level
				end
			end
			msg.post(can_table[actual_can], "enable")
			msg.post("mainG#gui", "change_can")
		end
	end
end

function on_message(self, message_id, message, sender)
	if pause_flag == 0 then
		if message_id == hash("CAN_CHANGE_LEFT") then
			msg.post(can_table[actual_can], "disable")
			actual_can = actual_can - 1
			if actual_can < 1 then
				if level > 5 then
					actual_can = 5
				else
					actual_can = level
				end
			end
			msg.post(can_table[actual_can], "enable")
			msg.post("mainG#gui", "change_can")
		end

		if message_id == hash("CAN_CHANGE_RIGHT") then
			msg.post(can_table[actual_can], "disable")
			actual_can = actual_can + 1
			if actual_can > level or actual_can > 5 then
				actual_can = 1
			end
			msg.post(can_table[actual_can], "enable")
			msg.post("mainG#gui", "change_can")
		end
	end
end