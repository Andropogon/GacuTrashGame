sound_effect_flag = true
controls_help = true


-- List ids for all platforms.
local admob_ids = {
	-- ['iPhone OS'] = {
	-- 	banner = 'ca-app-pub-3940256099942544/2934735716',
	-- 	interstitial = 'ca-app-pub-3940256099942544/5135589807',
	-- 	rewarded = 'ca-app-pub-3940256099942544/1712485313'
	-- },
	Android = {
		banner ='ca-app-pub-4904724253591504/7895114389',
		interstitial = 'ca-app-pub-4904724253591504/6403242778',
		-- rewarded = 'ca-app-pub-3940256099942544/5224354917'
	}
}

local system_name = sys.get_sys_info().system_name
-- Leave only current system ids
admob_ids = admob_ids[system_name] or {}

local function load_interstitial_pressed(self)
	print('load_interstitial_pressed')
	admob.load{
		type = 'interstitial',
		id = admob_ids.interstitial,
		immersive = true,
		keywords = {'puzzle', 'game'},
		non_personalized = true
	}
end


local function show_interstitial_pressed(self)
	print('show_interstitial_pressed')
	admob.show('interstitial')
end


local function load_banner_pressed(self)
	print('load_banner_pressed')
	admob.load{
		type = 'banner',
		id = 'ca-app-pub-4904724253591504/7895114389',
		size = 'smart',
		position = 'bottom',
		keywords = {'puzzle', 'game'}
	}
end

local function hide_banner_pressed(self)
	print('hide_banner_pressed')
	admob.hide_banner()
end

local function init_pressed(self)
	print('init_pressed')
	-- Admob events handler.
	local function listener(event)
		print('admob listener')
		print('admob event type', event.type)
		print('admob error phase', event.phase)
		print('admob event is_error', event.is_error)
		print('admob error code', event.error_code)
		if event.phase == 'init' then -- Admob has been initialized, now it's safe to load a banner.
			print('admob load')
			admob.load{
				type = 'banner',
				id = 'ca-app-pub-4904724253591504/7895114389',
				size = 'smart',
				position = 'bottom',
				keywords = {'puzzle', 'game'}
			}
		elseif event.phase == 'rewarded' then
			print('reward received')
		end
	end

	-- Init Admob.
	admob.init{
		test = true, -- ALWAYS use test ads, only disable when submitting to the stores.
		listener = listener
	}
end


local function load_menu(self)
	msg.post("go#main-menu", "load")
	msg.post("go#main-menu", "enable")
end

local function unload_menu(self)
	msg.post("go#main-menu", "unload")
end

local function load_main(self)
	msg.post("go#mainG", "load")
	msg.post("go#mainG", "enable")
end

local function unload_main(self)
	msg.post("go#mainG", "unload")
end

local function restart_main(self)
	msg.post("go#mainG","reset")
	--msg.post("go#main", "unload")
	--msg.post("go#main", "load")
	--msg.post("go#main", "enable")
end

local function load_credits(self)
	msg.post("go#credits", "load")
	msg.post("go#credits", "enable")
end

local function unload_credits(self)
	msg.post("go#credits", "unload")
end

local function load_menuHelp(self)
	msg.post("go#menu-help", "load")
	msg.post("go#menu-help", "enable")
end

local function unload_menuHelp(self)
	msg.post("go#menu-help", "unload")
end

function init(self)
	msg.post(".", "acquire_input_focus")
	load_menu(self)
	init_pressed(self)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("start_game") then
		unload_menu(self)
		load_main(self)
		load_interstitial_pressed(self)
	end
	if message_id == hash("open_menu") then
		show_interstitial_pressed(self)
		unload_main(self)
		load_menu(self)
	end
	if message_id == hash("play_again") then
		-- restart_main(self)
		self.restart = true
		show_interstitial_pressed(self)
		msg.post("go#mainG", "disable")
		msg.post("go#mainG", "unload")
	end
	
	if message_id == hash("proxy_unloaded") then
	-- let unloader know
		if self.restart == true then
			msg.post("go#mainG", "load")
		end
	end

	if message_id == hash("proxy_loaded") then
		-- let unloader know
		if self.restart == true then
			msg.post("go#mainG", "enable")
			self.restart = false
		end
	end
	if message_id == hash("proxy_loaded") then
		-- let unloader know
		if self.restart == true then
			msg.post("go#mainG", "enable")
			self.restart = false
		end
	end
	if message_id == hash("menu_help") then
		unload_menu(self)
		load_menuHelp(self)
	end
	if message_id == hash("backHelp") then
		unload_menuHelp(self)
		load_menu(self)
	end
	if message_id == hash("credits") then
		unload_menu(self)
		load_credits(self)
	end
	if message_id == hash("backCredits") then
		unload_credits(self)
		load_menu(self)
	end
end 